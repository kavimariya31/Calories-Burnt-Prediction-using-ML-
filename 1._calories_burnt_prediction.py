# -*- coding: utf-8 -*-
"""2. Calories Burnt Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pG_rC6g1ANAJ5wgKs0J7JV9Ut45QaGt9

Importing the Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

#loading the data from csv file to a Pandaas DataFrame
calories = pd.read_csv('/content/calories.csv')

#print the first 5 rows of the dataframe
calories.head()

exercise_data = pd.read_csv('/content/exercise.csv')

exercise_data.head()

#combining the two dataframes
calories_data = pd.concat([exercise_data, calories['Calories']] , axis=1)

calories_data.head()

calories_data.shape

#getting some informations about the data
calories_data.info()

#checking for missing values
calories_data.isnull().sum()

#data analysis
calories_data.describe()

#data visualization
sns.set()

#plotting the gendere column in count plot
sns.countplot(calories_data['Gender'])

#finding the distribution of "Age" column
sns.displot(calories_data['Age'])

sns.displot(calories_data['Height'])

sns.displot(calories_data['Weight'])

sns.displot(calories_data['Duration'])

sns.displot(calories_data['Heart_Rate'])

#finding the correlation in the dataset
#positive correlation and negative correlation
correlation = calories_data.drop(columns=['Gender','User_ID']).corr()

#constructing a heatmap to understand the correlation
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f' , annot=True, annot_kws={'size' :8}, cmap='Blues')

#converting the text datas into numericals values because ml model cannot accept the string values
calories_data.replace({"Gender": {'male': 0, 'female':1}}, inplace=True)

#seperating features and target
X = calories_data.drop(columns=['User_ID','Calories'], axis=1)
Y = calories_data['Calories']

print(X)

print(Y)

#splitting the data into training data and test data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

#model training
model = XGBRegressor()

# training the model with X_train
model.fit(X_train, Y_train)

#evaluation
#prediction on test data
test_data_prediction = model.predict(X_test)

print(test_data_prediction)

#mean absolute error
mae = metrics.mean_absolute_error(Y_test, test_data_prediction)

print("Mean Absolute Error =", mae)

# Input data for prediction
input_data = (1,20,190.0,70.0,50.0,105.0,47.0)
# Change the input data here with actual values for: Gender, Age, Height, Weight, Duration, Heart_Rate, Body_Temp

# Convert input data to a NumPy array
input_data_as_numpy_array = np.asarray(input_data)

# Reshape the array
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

# Make prediction
prediction = model.predict(input_data_reshaped)

# Print the prediction
print("The person can burn {} calories.".format(prediction[0]))